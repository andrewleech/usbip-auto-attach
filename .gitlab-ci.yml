# SPDX-FileCopyrightText: 2025 The Anon Kode Authors
# SPDX-License-Identifier: GPL-3.0-only

variables:
  # Define the image name using GitLab predefined variables
  BUILDER_IMAGE: $CI_REGISTRY_IMAGE/auto-attach-builder:$CI_COMMIT_SHA
  # Define build output directory relative to CI_PROJECT_DIR
  BUILD_OUTPUT_DIR: $CI_PROJECT_DIR/build # Output within the project dir

stages:
  - build_image
  - compile

# Job to build the Docker image used for compilation
build_docker_image:
  stage: build_image
  image: docker:20.10.16 # Use a Docker-in-Docker capable image
  services:
    - docker:20.10.16-dind # Start the Docker daemon service
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build -t $BUILDER_IMAGE .
    - docker push $BUILDER_IMAGE
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

# Base job definition for compilation tasks
.compile_base:
  stage: compile
  image: $BUILDER_IMAGE
  # Use script block to run commands inside the container
  # GitLab Docker runner automatically mounts the project dir
  script:
    # Ensure the output directory exists within the CI job workspace
    # Makefile will create ./build/x64 and ./build/arm64
    # Working directory is automatically set to $CI_PROJECT_DIR
    - make $MAKE_TARGET # Makefile uses default OUT_DIR=./build
  artifacts:
    paths:
      - $ARTIFACT_PATH
    expire_in: 1 week
  needs:
    - job: build_docker_image
      artifacts: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

# Job to compile the amd64 executable
compile_amd64:
  extends: .compile_base
  variables:
    MAKE_TARGET: $(TARGET_AMD64) # build/x64/auto-attach
    ARTIFACT_PATH: build/x64/auto-attach # Path relative to $CI_PROJECT_DIR

# Job to compile the arm64 executable
compile_arm64:
  extends: .compile_base
  variables:
    MAKE_TARGET: $(TARGET_ARM64) # build/arm64/auto-attach
    ARTIFACT_PATH: build/arm64/auto-attach # Path relative to $CI_PROJECT_DIR
